{"version":3,"sources":["SearchForm.tsx","WeatherCard.tsx","ForecastCard.tsx","ForecastWindow.tsx","API.ts","App.tsx","index.tsx"],"names":["Form","styled","form","SubmitButton","button","InputField","input","SearchForm","submit","React","newSearch","setNewSearch","action","onSubmit","event","preventDefault","city","type","placeholder","value","onChange","e","target","Card","div","MainInfo","MainInfoColumn","TempBox","CityName","Description","IconBox","img","ItemInfoBox","ItemInfoTitle","ItemInfoData","WeatherCard","x","weatherCardProps","celciusTemp","main","temp","toFixed","name","sys","country","src","weather","icon","alt","width","height","description","humidity","wind","speed","ForecastCardStyle","ForecastCardIcon","ForecastCardTitle","ForecastCardTemp","ForecastCard","forecastCardProps","forecastCardTitle","ForecastPanel","ForecastWindow","forecasts","weekdays","getWeather","search","axios","get","then","response","data","getForecast","MainContainer","AppTitle","LoginButton","incrementDate","date","Date","addDays","setHours","setMinutes","setSeconds","firstDay","secondDay","thirdDay","daysOfTheWeek","getDay","initialState","authenticated","weatherResponse","undefined","forecastResponse","reducer","state","payload","weatherPayload","forecastPayload","App","useReducer","update","useEffect","a","Promise","all","wResponse","fResponse","console","log","callToAPIs","checkTimeAndFilter","day","res","list","filter","item","isSameDay","dt_txt","isSameHour","resultDays","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63dd9c63.chunk.js","sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\n\nconst Form = styled.form`\n  margin: 25px auto;\n  width: 50%;\n  padding: 10px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst SubmitButton = styled.button`\n  font-size: 20px;\n  letter-spacing: 5px;\n  font-weight: 100;\n  border-radius: 15px;\n  border: 2px solid white;\n  padding: 12px 20px;\n  background: rgb(38, 53, 64, 0.7);\n  color: white;\n  transition: 0.2s ease-in-out;\n  &:hover {\n    background: white;\n    color: rgb(38, 53, 64);\n  }\n`;\n\nconst InputField = styled.input`\n  font-size: 30px;\n  font-weight: 100;\n  padding: 7px 14px;\n  margin: 0px 20px;\n  width: inherit;\n  color: white;\n  background: rgb(38, 53, 64, 0.7);\n  outline: none;\n  border-radius: 15px;\n  border: none;\n`;\n\nexport type SearchProps = {\n  city: string;\n};\n\nexport const SearchForm = ({\n  submit,\n}: {\n  submit: (city: SearchProps) => void;\n}) => {\n  const [newSearch, setNewSearch] = React.useState(\"\");\n\n  return (\n    <Form\n      action=\"submit\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        submit({ city: newSearch });\n        setNewSearch(\"\");\n      }}\n    >\n      <InputField\n        type=\"text\"\n        placeholder=\"What's the weather like in...\"\n        value={newSearch}\n        onChange={(e) => setNewSearch(e.target.value)}\n      />\n      <SubmitButton type=\"submit\">SEARCH</SubmitButton>\n    </Form>\n  );\n};\n","import * as React from \"react\";\nimport { WeatherResponse } from \"./App\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div`\n  background: rgb(164, 176, 189, 0.7);\n  border-radius: 50px 50px 5px 5px;\n  color: rgb(38, 53, 64);\n  padding: 5px;\n  margin: 0px auto;\n  width: 50%;\n`;\n\nconst MainInfo = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst MainInfoColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0px auto;\n`;\nconst TempBox = styled.div`\n  text-align: center;\n  font-size: 5rem;\n  margin: 60px 0px;\n`;\n\nconst CityName = styled.div`\n  text-align: center;\n  font-size: 25px;\n  margin: 20px;\n`;\n\nconst Description = styled.div`\n  text-align: center;\n  font-size: 25px;\n  margin: 20px;\n`;\n\nconst IconBox = styled.img`\n  margin: auto;\n`;\n\nconst ItemInfoBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  letter-spacing: 3px;\n  margin-bottom: 20px;\n`;\n\nconst ItemInfoTitle = styled.div`\n  font-size: 15px;\n  text-align: center;\n  letter-spacing: 5px;\n  margin: 20px;\n`;\n\nconst ItemInfoData = styled.div`\n  font-size: 25px;\n  text-align: center;\n`;\n\nfunction celciusConvertion(x: number) {\n  return x - 273.15;\n}\n\nexport const WeatherCard = ({\n  weatherCardProps,\n}: {\n  weatherCardProps: WeatherResponse;\n}) => {\n  const celciusTemp = celciusConvertion(weatherCardProps.main.temp).toFixed(0);\n  const imageDimension = \"200\";\n\n  return (\n    <Card>\n      <MainInfo>\n        <MainInfoColumn>\n          <TempBox>{celciusTemp}Â°C</TempBox>\n          <CityName>\n            {weatherCardProps.name}, {weatherCardProps.sys.country}\n          </CityName>\n        </MainInfoColumn>\n        <MainInfoColumn>\n          <IconBox\n            src={`http://openweathermap.org/img/wn/${weatherCardProps.weather[0].icon}@2x.png`}\n            alt=\"\"\n            width={imageDimension}\n            height={imageDimension}\n          />\n          <Description>{weatherCardProps.weather[0].description}</Description>\n        </MainInfoColumn>\n        <MainInfoColumn>\n          <ItemInfoBox>\n            <ItemInfoTitle>HUMIDITY</ItemInfoTitle>\n            <ItemInfoData>{weatherCardProps.main.humidity}%</ItemInfoData>\n          </ItemInfoBox>\n          <ItemInfoBox>\n            <ItemInfoTitle>WIND SPEED</ItemInfoTitle>\n            <ItemInfoData>{weatherCardProps.wind.speed}mph</ItemInfoData>\n          </ItemInfoBox>\n        </MainInfoColumn>\n      </MainInfo>\n    </Card>\n  );\n};\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Forecast } from \"./App\";\n\nconst ForecastCardStyle = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 30px 10px;\n  padding: 10px 20px;\n  border: 2px solid rgb(38, 53, 64);\n  border-radius: 20px;\n`;\n\nconst ForecastCardIcon = styled.img``;\n\nconst ForecastCardTitle = styled.div`\n  text-align: center;\n  font-size: 25px;\n  font-weight: lighter;\n`;\n\nconst ForecastCardTemp = styled.div`\n  text-align: center;\n  font-size: 25px;\n  font-weight: lighter;\n  margin-top: 10px;\n`;\n\nconst celciusConvertion = (x: number) => {\n  return x - 273.15;\n};\n\nexport const ForecastCard = ({\n  forecastCardProps,\n  forecastCardTitle,\n}: {\n  forecastCardProps: Forecast[];\n  forecastCardTitle: string;\n}) => {\n  const celciusTemp = celciusConvertion(forecastCardProps[0].main.temp).toFixed(\n    0\n  );\n  return (\n    <ForecastCardStyle>\n      <ForecastCardTitle>{forecastCardTitle}</ForecastCardTitle>\n      <ForecastCardIcon\n        src={`http://openweathermap.org/img/wn/${forecastCardProps[0].weather[0].icon}@2x.png`}\n        alt=\"\"\n      />\n      <ForecastCardTemp>{celciusTemp}Â°C</ForecastCardTemp>\n    </ForecastCardStyle>\n  );\n};\n","import * as React from \"react\";\nimport { ForecastCard } from \"./ForecastCard\";\nimport { Forecast } from \"./App\";\nimport styled from \"styled-components\";\n\nconst ForecastPanel = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  margin: 15px auto;\n  width: 50%;\n  background: rgb(164, 176, 189, 0.7);\n  border-radius: 5px 5px 50px 50px;\n  padding: 5px;\n`;\n\nexport const ForecastWindow = ({\n  forecasts,\n  weekdays,\n}: {\n  forecasts: Forecast[][];\n  weekdays: string[];\n}) => {\n  return (\n    <ForecastPanel>\n      <ForecastCard\n        forecastCardProps={forecasts[0]}\n        forecastCardTitle={weekdays[0]}\n      />\n      <ForecastCard\n        forecastCardProps={forecasts[1]}\n        forecastCardTitle={weekdays[1]}\n      />\n      <ForecastCard\n        forecastCardProps={forecasts[2]}\n        forecastCardTitle={weekdays[2]}\n      />\n    </ForecastPanel>\n  );\n};\n","import axios from \"axios\";\nimport { WeatherResponse, ForecastResponse } from \"./App\";\n\n// pass in the search location as a prop\nexport const getWeather = (search: string) => {\n  return axios\n    .get<WeatherResponse>(\n      `http://api.openweathermap.org/data/2.5/weather?q=${search}&appid=b46010a9031dddd81c9d4a302cfac47e`\n    )\n    .then((response) => {\n      return response.data;\n    });\n};\n\nexport const getForecast = (search: string) => {\n  return axios\n    .get<ForecastResponse>(\n      `http://api.openweathermap.org/data/2.5/forecast?q=${search}&appid=b46010a9031dddd81c9d4a302cfac47e`\n    )\n    .then((response) => {\n      return response.data;\n    });\n};\n","import React, { useEffect, useReducer } from \"react\";\nimport styled from \"styled-components\";\nimport { SearchForm } from \"./SearchForm\";\nimport { WeatherCard } from \"./WeatherCard\";\nimport { ForecastWindow } from \"./ForecastWindow\";\nimport {\n  isSameDay,\n  addDays,\n  setHours,\n  setMinutes,\n  setSeconds,\n  getDay,\n} from \"date-fns\";\nimport { isSameHour } from \"date-fns/esm\";\nimport { getWeather, getForecast } from \"./API\";\n\nconst MainContainer = styled.div`\n  font-family: sans-serif;\n  font-weight: 100;\n  /* needs a method that checks the value of the api response after it's filtered to determine which background image is set */\n  background-image: url(\"https://a-static.besthdwallpaper.com/new-zealand-natural-landscape-wallpaper-3554x1999-2934_53.jpg\");\n  color: white;\n  text-align: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nconst AppTitle = styled.div`\n  font-size: 35px;\n  font-weight: lighter;\n  padding: 50px 5px 10px 10px;\n  letter-spacing: 20px;\n`;\n\nconst LoginButton = styled.button`\n  font-size: 20px;\n  letter-spacing: 5px;\n  font-weight: 100;\n  border-radius: 15px;\n  border: 2px solid white;\n  padding: 12px 20px;\n  background: rgb(38, 53, 64, 0.7);\n  color: white;\n  transition: 0.2s ease-in-out;\n  &:hover {\n    background: white;\n    color: rgb(38, 53, 64);\n  }\n`;\n\n// Adds amount of days required to date and sets time to 15:00:00\nconst incrementDate = (value: number, date = new Date()) => {\n  return addDays(setHours(setMinutes(setSeconds(date, 0), 0), 15), value);\n};\n\nconst firstDay = incrementDate(1);\nconst secondDay = incrementDate(2);\nconst thirdDay = incrementDate(3);\n\nconst daysOfTheWeek: string[] = [\n  \"Sun\",\n  \"Mon\",\n  \"Tue\",\n  \"Wed\",\n  \"Thu\",\n  \"Fri\",\n  \"Sat\",\n];\n\nconst weekdays: string[] = [\n  daysOfTheWeek[getDay(firstDay)],\n  daysOfTheWeek[getDay(secondDay)],\n  daysOfTheWeek[getDay(thirdDay)],\n];\n\n// type declarations\nexport type WeatherResponse = {\n  coord: { lon: number; lat: number };\n  weather: [\n    {\n      id: number;\n      main: string;\n      description: string;\n      icon: string;\n    }\n  ];\n  base: string;\n  main: {\n    temp: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n  };\n  visibility: number;\n  wind: { speed: number; deg: number };\n  clouds: { all: number };\n  dt: number;\n  sys: {\n    type: number;\n    id: number;\n    message: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n  };\n  id: number;\n  name: string;\n  cod: number;\n};\n\nexport type Forecast = {\n  dt: number;\n  main: {\n    temp: number;\n    temp_min: number;\n    temp_max: number;\n    pressure: number;\n    sea_level: number;\n    grnd_level: number;\n    humidity: number;\n    temp_kf: number;\n  };\n  weather: [\n    {\n      id: number;\n      main: string;\n      description: string;\n      icon: string;\n    }\n  ];\n  clouds: { all: number };\n  wind: { speed: number; deg: number };\n  snow: {};\n  sys: { pod: string };\n  dt_txt: string;\n};\n\nexport type ForecastResponse = {\n  cod: string;\n  message: number;\n  cnt: number;\n  list: Forecast[];\n  city: {\n    id: number;\n    name: string;\n    coord: { lat: number; lon: number };\n    country: string;\n  };\n};\n\nexport type AppState = {\n  authenticated: boolean;\n  city: string;\n  weatherResponse: WeatherResponse | undefined;\n  forecastResponse: ForecastResponse | undefined;\n};\n\nconst initialState: AppState = {\n  authenticated: false,\n  city: \"London\",\n  weatherResponse: undefined,\n  forecastResponse: undefined,\n};\n\nexport type AppEvents =\n  | {\n      type: \"logged in clicked\";\n    }\n  | {\n      type: \"logged out clicked\";\n    }\n  | {\n      type: \"search location submitted\";\n      payload: { city: string };\n    }\n  | {\n      type: \"weather response set\";\n      weatherPayload: WeatherResponse;\n    }\n  | {\n      type: \"forecast response set\";\n      forecastPayload: ForecastResponse;\n    };\n\nexport const reducer: React.Reducer<AppState, AppEvents> = (state, event) => {\n  switch (event?.type) {\n    case \"logged in clicked\": {\n      return {\n        ...state,\n        authenticated: true,\n      };\n    }\n    case \"logged out clicked\": {\n      return {\n        ...state,\n        authenticated: false,\n      };\n    }\n    case \"search location submitted\": {\n      return {\n        ...state,\n        city: event.payload.city,\n      };\n    }\n    case \"weather response set\": {\n      return {\n        ...state,\n        weatherResponse: event.weatherPayload,\n      };\n    }\n    case \"forecast response set\": {\n      return {\n        ...state,\n        forecastResponse: event.forecastPayload,\n      };\n    }\n  }\n};\n\nfunction App() {\n  const [state, update] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    async function callToAPIs() {\n      try {\n        const [wResponse, fResponse] = await Promise.all([\n          getWeather(state.city),\n          getForecast(state.city),\n        ]);\n        update({\n          type: \"weather response set\",\n          weatherPayload: wResponse,\n        });\n        update({\n          type: \"forecast response set\",\n          forecastPayload: fResponse,\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    if (state.city !== null) {\n      callToAPIs();\n    }\n  }, [state.city]);\n\n  // because we said that our state can be undefined | T (whatever value when it's not defined)\n  // we need to check if it is defined!\n  if (!state.weatherResponse || !state.forecastResponse) return null;\n\n  // Pass the state.forecastResponse in as an argument to the function\n  const checkTimeAndFilter = (day: Date, res: ForecastResponse) => {\n    return res.list.filter(\n      (item: { dt_txt: string | number | Date }) =>\n        isSameDay(new Date(item.dt_txt), day) &&\n        isSameHour(new Date(item.dt_txt), day)\n    );\n  };\n\n  const resultDays: Forecast[][] = [\n    checkTimeAndFilter(firstDay, state.forecastResponse),\n    checkTimeAndFilter(secondDay, state.forecastResponse),\n    checkTimeAndFilter(thirdDay, state.forecastResponse),\n  ];\n\n  return (\n    <MainContainer>\n      <AppTitle>WEATHER APP</AppTitle>\n      <LoginButton\n        onClick={() =>\n          update({\n            type: !state.authenticated\n              ? \"logged in clicked\"\n              : \"logged out clicked\",\n          })\n        }\n      >\n        {!state.authenticated ? \"Log in\" : \"Log out\"}\n      </LoginButton>\n      {state.authenticated ? (\n        <div>\n          <SearchForm\n            submit={({ city }) => {\n              update({ type: \"search location submitted\", payload: { city } });\n            }}\n          />\n          <WeatherCard weatherCardProps={state.weatherResponse} />\n          <ForecastWindow forecasts={resultDays} weekdays={weekdays} />\n        </div>\n      ) : null}\n    </MainContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}